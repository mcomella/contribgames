#!/usr/bin/env python3.2
"""
Script for listing all games in contrib.

games list
games info <game>

"""
from datetime import datetime, timedelta
from json import load
from os import getenv, listdir, path
from random import randint
from re import search, sub
import argparse
import logging
import sys

def main():
	args = set_and_parse_args()
	setup_logging(args.verbose)
	args.func(args)

def set_and_parse_args():
	parser = argparse.ArgumentParser(description='Student games information '
			'tool')
	parser.add_argument('-v', '--verbose', action='count', help='Show '
			'debugging information; -vv shows even more debugging information')

	subs = parser.add_subparsers(title='command', help='command help')

	list_parser = subs.add_parser('list', help='THIS IS HELPFUL')
	list_parser.set_defaults(func=listGames)

	info_parser = subs.add_parser('info', help='SO IS THIS')
	info_parser.set_defaults(func=gameInfo)

	return parser.parse_args()

def setup_logging(verbosity):
	"""Inits logging on the number of -v args received, given as verbosity."""
	if verbosity is None: level = logging.WARNING
	elif verbosity == 1: level = logging.INFO
	else: level = logging.DEBUG
	logging.basicConfig(level=level)

def listGames(options):
	for i in getAllGames():
		print(i)
	pass

def getAllGames():
	projects = set(listdir('/contrib/projects/'))
	projects = projects | { sub('\.json$', '', p) for p in listdir('/contrib/projects/games/manual/')}
	games = []
	for p in projects:
		game = loadGame(p)
		if game != None:
			logging.info('Successfully loaded "%s"' % p)
			games.append(game)
	return games

def loadGame(projName):
	"""Returns either a Game or None."""
	game = None

	f = None
	try:
		f = open('/contrib/projects/'+projName+'/.games.json')
	except IOError as e:
		logging.debug('/contrib/projects/'+projName+'/.games.json does not exist')
		try:
			f = open('/contrib/projects/games/manual/'+projName+'.json')
		except IOError as e:
			logging.debug('/contrib/projects/games/manual/'+projName+'.json does not exist')
			return None

	if f is None:
		logging.info('No .json file found for project "%s", probably not a game' % projName)
		return None

	js = None
	try:
		js = load(f)
	except Exception as e:
		logging.info('Invalid json for project "%s"' % projName)
		return None
	finally:
		f.close()

	try:
		game = Game(projName, js)
	except Exception as e:
		logging.info('Unable to construct "%s"' % projName)
		logging.debug('Problems with construction: '+str(e))

	return game

class Game:
	"""Represents a single contrib/ game."""
	def __init__(self, projname, json):
		log = ErrorLogger()

		self.projname = str(projname)
		self.name = log.getValue(json, 'name')
		self.desc = log.getValue(json, 'desc')
		self.url = log.getValue(json, 'name', False)

		self.json = json

		if not log.okay:
			raise Exception(log.log)

	def __str__(self):
		return self.json.__str__()

class ErrorLogger:
	log = ''
	okay = True

	def getValue(self, d, val, required=True):
		if val in d:
			return d[val]
		elif required:
			self.okay = False
			self.log += '\nMissing required "%s" attribute' % val
		else:
			return None

def gameInfo(options):
	pass

if __name__ == "__main__":
	main()
