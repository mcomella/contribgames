#!/usr/bin/env python3.2
"""
Script for listing all games in contrib.

games list
games info <game>


"""

import argparse
import logging
from datetime import datetime, timedelta
from json import load
from os import getenv, listdir, path
from random import randint
from re import search,sub
import sys

class ErrorLogger:
	log = '';
	okay = True;

	def getValue(self, d, val, required=True):
		if val in d:
			return d[val];
		elif required:
			self.okay = False;
			self.log += '\nMissing required "%s" attribute' % val;
		else:
			return None;

class Game:
	"""
	Represents a single contrib/ game
	"""

	def __init__(self, projname, json):
		log = ErrorLogger();

		self.projname = str(projname);
		self.name = log.getValue(json, 'name');
		self.desc = log.getValue(json, 'desc');
		self.url = log.getValue(json, 'name', False);

		self.json = json

		if not log.okay:
			raise Exception(log.log);


	def __str__(self):
		return self.json.__str__();

def loadGame(projName):
	"""
	Returns either a Game or None.
	"""
	game = None;

	f = None;
	try:
		f = open('/contrib/projects/'+projName+'/.games.json');
	except IOError as e:
		logging.debug('/contrib/projects/'+projName+'/.games.json does not exist');
		try:
			f = open('/contrib/projects/games/manual/'+projName+'.json');
		except IOError as e:
			logging.debug('/contrib/projects/games/manual/'+projName+'.json does not exist');
			return None;

	if f is None:
		logging.info('No .json file found for project "%s", probably not a game' % projName);
		return None;

	js = None;
	try:
		js = load(f);
	except Exception as e:
		logging.info('Invalid json for project "%s"' % projName);
		return None;
	finally:
		f.close();

	try:
		game = Game(projName, js);
	except Exception as e:
		logging.info('Unable to construct "%s"' % projName);
		logging.debug('Problems with construction: '+str(e));

	return game;

def getAllGames():
	projects = set(listdir('/contrib/projects/'));
	projects = projects | { sub('\.json$', '', p) for p in listdir('/contrib/projects/games/manual/')};
	games = [];
	for p in projects:
		game = loadGame(p);
		if game != None:
			logging.info('Successfully loaded "%s"' % p);
			games.append(game);
	return games;

def listGames(options):
	for i in getAllGames():
		print(i);
	pass;

def gameInfo(options):
	pass;

# from stackoverflow
class VAction(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        if values==None:
            values='1'
        try:
            values=int(values)
        except ValueError:
            values=values.count('v')+1
        setattr(args, self.dest, values)

def main():
	topParser = argparse.ArgumentParser(description='Student games information tool');
	topParser.add_argument('-v', '--verbose', nargs='?', action=VAction, dest='verbosity', help='Show debugging information; -v 2 or -vv shows even more debugging information');

	subs = topParser.add_subparsers(title='command',help='command help');

	listParser = subs.add_parser('list', help='THIS IS HELPFUL');
	listParser.set_defaults(func=listGames);

	infoParser = subs.add_parser('info', help='SO IS THIS');
	infoParser.set_defaults(func=gameInfo);

	args = topParser.parse_args();

	v = args.verbosity or 0;
	logging.basicConfig(level=(logging.WARNING if v < 1 else logging.INFO if v == 1 else logging.DEBUG));

	args.func(args);

if __name__ == "__main__":
    main();

